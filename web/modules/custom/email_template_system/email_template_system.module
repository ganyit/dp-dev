<?php

/**
 * @file
 * Primary module hooks for email template system module.
 */

use Drupal\Core\Render\Element;
use Drupal\user\UserInterface;
use Drupal\Core\Url;
use Drupal\Core\Messenger\MessengerInterface;
use Symfony\Component\HttpFoundation\RedirectResponse;
use Drupal\comment\CommentInterface;
use GuzzleHttp\Exception\RequestException;

/**
 * @file
 * Primary module hooks for taskmanager module.
 */
function email_template_system_theme($existing, $type, $theme, $path) {
  return [
    'email_template' => [
      'template' => 'email-template', // The Twig template file name.
      'variables' => ['email_templates' => array()],  // Define the variables passed to the template.
    ],
    'email_template_mail_form' => [
      'template' => 'email-template-mail-form', // The Twig template file name.
      'variables' => ['email_form' => array()],  // Define the variables passed to the template.
    ],
  ];
}

/**
 * Implements hook_entity_insert() to change the redirect after entity creation.
 */
function email_template_system_entity_insert(Drupal\Core\Entity\EntityInterface $entity) {
  // Check if the entity is of the type 'my_custom_entity' (replace with your entity type).
  if ($entity->getEntityTypeId() == 'email_template') {
    // Redirect to the listing page instead of the view page.
    $listing_url = Url::fromRoute('email_template_system.email_template_listing');  // Adjust to your listing route.
    // Redirect after saving the entity.
    \Drupal::messenger()->addMessage(t('The email template has been created. You are being redirected.'));
    $response = new RedirectResponse($listing_url->toString());
    $response->send();
  }
}
  

/**
 * Implements hook_comment_presave().
 */
function  email_template_system_comment_presave(CommentInterface $comment) {

  $body = $comment->get('comment_body')->value;

  // Call OpenAI moderation API.
  $is_flagged =  email_template_system_check_comment($body);

  if ($is_flagged) {
    // Prevent saving by unpublishing.
    $comment->setUnpublished();
    \Drupal::messenger()->addWarning(t('This comment was flagged by the AI moderator and set to unpublished.'));
  }
}

/**
 * Check comment with OpenAI moderation API.
 */
function  email_template_system_check_comment($text) {
  $api_key = '';
  try {
    $client = \Drupal::httpClient();
    $response = $client->post('https://api.openai.com/v1/moderations', [
      'headers' => [
        'Authorization' => "Bearer $api_key",
        'Content-Type' => 'application/json',
      ],
      'json' => [
        'input' => $text,
      ],
    ]);
    $data = json_decode($response->getBody(), TRUE);
    return $data['results'][0]['flagged'];
  } catch (RequestException $e) {
    watchdog_exception('openai_moderator', $e);
    return FALSE;
  }
}